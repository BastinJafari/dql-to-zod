[
  {
    "dqlSchemaString": "# Define Types\n\ntype Person {\n    name\n    boss_of\n    works_for\n}\n\ntype Company {\n    name\n    industry\n    work_here #this is an alias\n}\n\n# Define Directives and index\n\nindustry: string @index(term) .\nboss_of: [uid] .\nname: string @index(exact, term) .\nworks_for: [uid] .\nwork_here: [uid] .",
    "dqlSchemaParsed": {
      "types": [
        {
          "name": "Person",
          "fields": ["name", "boss_of", "works_for"]
        },
        {
          "name": "Company",
          "fields": ["name", "industry", "work_here"]
        }
      ],
      "directives": [
        {
          "name": "industry",
          "type": "string",
          "index": ["term"]
        },
        {
          "name": "boss_of",
          "type": "[uid]"
        },
        {
          "name": "name",
          "type": "string",
          "index": ["exact", "term"]
        },
        {
          "name": "works_for",
          "type": "[uid]"
        },
        {
          "name": "work_here",
          "type": "[uid]"
        }
      ]
    },
    "zodSchemaString": "import { z } from 'zod'\n\n    const Person = z.object({\n      name: z.string(),\n      boss_of: z.array(z.string().uuid()).optional(),\n      works_for: z.array(z.string().uuid()).optional(),\n    })\n\n    type Person = z.infer<typeof Person>\n    \n    const Company = z.object({\n      name: z.string(),\n      industry: z.string(),\n      work_here: z.array(z.string().uuid()).optional(),\n    })\n    \n    type Company = z.infer<typeof Company>\n    "
  },
  {
    "dqlSchemaString": "MembershipFee.amount: float .\nMembershipFee.date: string .\nMembershipFee.space: uid .\nNewsletter.content: string .\nNewsletter.space: uid .\nNewsletter.title: string .\nSpace.category: string .\nSpace.description: string .\nSpace.location: string .\nSpace.members: [uid] .\nSpace.membershipFees: [uid] .\nSpace.name: string .\nSpace.newsletters: [uid] .\nSpace.recurringTime: string .\nUser.email: string @index(exact) @upsert .\nUser.name: string .\nUser.password: string .\nUser.spaces: [uid] .\ndgraph.drop.op: string .\ndgraph.graphql.p_query: string @index(sha256) .\ndgraph.graphql.schema: string .\ndgraph.graphql.xid: string @index(exact) @upsert .\nemail: string .\nid: string .\nname: string .\npassword: string .\ntype MembershipFee {\n\tMembershipFee.amount\n\tMembershipFee.date\n\tMembershipFee.space\n}\ntype Newsletter {\n\tNewsletter.title\n\tNewsletter.content\n\tNewsletter.space\n}\ntype Space {\n\tSpace.name\n\tSpace.description\n\tSpace.category\n\tSpace.location\n\tSpace.recurringTime\n\tSpace.members\n\tSpace.newsletters\n\tSpace.membershipFees\n}\ntype User {\n\tUser.name\n\tUser.email\n\tUser.password\n\tUser.spaces\n}\ntype dgraph.graphql {\n\tdgraph.graphql.schema\n\tdgraph.graphql.xid\n}\ntype dgraph.graphql.persisted_query {\n\tdgraph.graphql.p_query\n}\ntype dgraph.type.Group {\n\n}\ntype dgraph.type.Rule {\n\n}\ntype dgraph.type.User {\n\n}",
    "dqlSchemaParsed": {
      "types":[
        {
          "name": "MembershipFee",
          "fields": ["MembershipFee.amount", "MembershipFee.date", "MembershipFee.space"]
        },
        {
          "name": "Newsletter",
          "fields": ["Newsletter.title", "Newsletter.content", "Newsletter.space"]
        },
        {
          "name": "Space",
          "fields": ["Space.name", "Space.description", "Space.category", "Space.location", "Space.recurringTime", "Space.members", "Space.newsletters", "Space.membershipFees"]
        },
        {
          "name": "User",
          "fields": ["User.name", "User.email", "User.password", "User.spaces"]
        }
      ],
      "directives": [
        {
          "name": "MembershipFee.amount",
          "type": "float"
        },
        {
          "name": "MembershipFee.date",
          "type": "string"
        },
        {
          "name": "MembershipFee.space",
          "type": "uid"
        },
        {
          "name": "Newsletter.content",
          "type": "string"
        },
        {
          "name": "Newsletter.space",
          "type": "uid"
        },
        {
          "name": "Newsletter.title",
          "type": "string"
        },
        {
          "name": "Space.category",
          "type": "string"
        },
        {
          "name": "Space.description",
          "type": "string"
        },
        {
          "name": "Space.location",
          "type": "string"
        },
        {
          "name": "Space.members",
          "type": "[uid]"
        },
        {
          "name": "Space.membershipFees",
          "type": "[uid]"
        },
        {
          "name": "Space.name",
          "type": "string"
        },
        {
          "name": "Space.newsletters",
          "type": "[uid]"
        },
        {
          "name": "Space.recurringTime",
          "type": "string"
        },
        {
          "name": "User.email",
          "type": "string",
          "index": ["exact"],
          "upsert": true
        },
        {
          "name": "User.name",
          "type": "string"
        },
        {
          "name": "User.password",
          "type": "string"
        },
        {
          "name": "User.spaces",
          "type": "[uid]"
        }
      ]
    },
    "zodSchemaString": "import { z } from 'zod'\n\n    const MembershipFee = z.object({\n      amount: z.number().optional(),\n      date: z.string().optional(),\n      space: z.string().uuid().optional(),\n    })\n\n    type MembershipFee = z.infer<typeof MembershipFee>\n    \n    const Newsletter = z.object({\n      title: z.string().optional(),\n      content: z.string().optional(),\n      space: z.string().uuid().optional(),\n    })\n    \n    type Newsletter = z.infer<typeof Newsletter>\n    \n    const Space = z.object({\n      name: z.string().optional(),\n      description: z.string().optional(),\n      category: z.string().optional(),\n      location: z.string().optional(),\n      recurringTime: z.string().optional(),\n      members: z.array(z.string().uuid()).optional(),\n      newsletters: z.array(z.string().uuid()).optional(),\n      membershipFees: z.array(z.string().uuid()).optional(),\n    })\n    \n    type Space = z.infer<typeof Space>\n    \n    const User = z.object({\n      name: z.string().optional(),\n      email: z.string().optional(),\n      password: z.string().optional(),\n      spaces: z.array(z.string().uuid()).optional(),\n    })\n    \n    type User = z.infer<typeof User>\n    "
  }
]
